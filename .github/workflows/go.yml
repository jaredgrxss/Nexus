# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Nexus CI / CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go version
      uses: actions/setup-go@v4
      with:
        go-version: '1.21.6'
    
    - name: Cache modules and dependencies
      uses: actions/cache@v4
      with: 
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum')}}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build application
      run: go build -v ./...

    - name: Run test suite
      run: go test -v ./...
  
  staging-deployment:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      # Gather AWS Account credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with: 
        aws-access-key-id: ${{ secrets.QA_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.QA_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

      # Checkout code from repo
    - name: Checkout repository code
      uses: actions/checkout@v4

      # Validate cloudformation template has no errors
    - name: Validate Cloudformation Template
      run: |
        aws cloudformation validate-template --template-body file://cloudformation/staging.yml
    
      # Deploy the stack to staging
    - name: Deploy Cloudformation Stack
      run: |
        aws cloudformation deploy \
          --tempmlate-file cloudformation/staging.yml
          --stack-name NexusDeployment
          --capabilities CAPABILITY_IAM \
        
      # Verify deployment was successful
    - name: Verify Cloudformation Deployment
      run: |
        aws cloudformation describe-stacks --stack-name NexusDeployment
    
      # Login to ecr 
    - name: Login to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
      # Build, tag, and push docker image
    - name : Build, Tag, and Push Docker Image
      env: 
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: Nexus
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
      # Deploy the updated docker image to ECS
    - name: Deploy to ECS
      env: 
        CLUSTER_NAME: 
        SERVICE_NAME: 
        TASK_FAMILY: 
        CONTAINER_NAME: 
        ECR_IMAGE: 
      run: |
          # Get the current task definition 


          # Create a new task definition with updated image


          # Register new task definition