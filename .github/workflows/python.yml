name: nexus

on:
  workflow_dispatch:
    inputs:
      deploy-service:
        description: "Specify the service to deploy"
        required: true
        default: "None"
        type: choice
        options:
          - "Data Service"
          - "Reversion Service"
          - "Momentum Service"
          - "All"
          - "None"
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions: write-all

jobs:
  # build code and run all test
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        python-version: [3.12]
    steps:
    - uses: actions/checkout@v4
    # setup Python 
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    # cache modules
    - name: Cache modules and dependencies
      uses: actions/cache@v4
      with: 
        path: |
          ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt')}}
        restore-keys: |
          ${{ runner.os }}-pip-
    # install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements.txt
    # install linter 
    - name: Install liner (flake8)
      run: pip install flake8
    # run linter
    - name: Run linter
      run: flake8 .
    # run test
    - name: Run test suite
      run: |
        pip install pytest pytest-cov
        pytest --cov-report=xml --cov=./
    # upload code coverage
    - name: Upload coverage 
      uses: codecov/codecov-action@v5
      with: 
        files: coverage.xml
        flags: unittests
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
    # scan for hardcoded secrets in code
    - name: Secret detection
      uses: gitleaks/gitleaks-action@v1
      env: 
        path: .
        exit-code: 1
        verbose: true

  # build and push docker image to ecr
  staging-build-and-push-image:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build-and-test]
    steps:
      # gather AWS Account credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with: 
        aws-access-key-id: ${{ secrets.QA_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.QA_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
      # checkout code from repo
    - name: Checkout repository code
      uses: actions/checkout@v4
      # login to AWS ECR
    - name: Login to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      # build, Tag, and Push the new image to aws ecr
    - name : Build, Tag, and Push Docker Image
      id: build-push
      env: 
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: nexus
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f dockerFile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      # output docker image-uri for later use
    outputs:
      image-uri: ${{ steps.build-push.outputs.image_uri }}

  # deploying resources shared across all services
  staging-common-cloudformation:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build-and-test]
    steps:
      # gather AWS Account credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with: 
        aws-access-key-id: ${{ secrets.QA_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.QA_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
      # checkout code from repo
    - name: Checkout repository code
      uses: actions/checkout@v4
      # validate cloudformation template has no errors
    - name: Validate Cloudformation Template
      run: |
        aws cloudformation validate-template --template-body file://cloudformation/common.yml
      # deploy the stack to staging
    - name: Deploy Cloudformation Stack
      run: |
        aws cloudformation deploy --template-file cloudformation/common.yml --stack-name NexusCommonDeployment --capabilities CAPABILITY_IAM 
      # verify deployment was successful
    - name: Verify Cloudformation Deployment
      run: |
        aws cloudformation describe-stacks --stack-name NexusCommonDeployment
  
  # approval gate 
  staging-manual-approval:
    if: always() && needs.staging-common-cloudformation.result == 'success'
    runs-on: ubuntu-latest
    needs: [build-and-test, staging-common-cloudformation, staging-build-and-push-image]
    environment:
      name: staging
    steps:
      - name: Waiting for staging approval
        run: echo "Approval received - proceeding with deployments" 

  # data service deploys
  staging-deploy-data-service:
    # only deploy upon main merge & input
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [staging-manual-approval]
    environment: staging
    permissions:
      deployments: write
    steps:
      # gather AWS creds
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.QA_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.QA_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
      # checkout code
    - name: Checkout repository code
      uses: actions/checkout@v4
      # make sure CF file is valid
    - name: Validate Service Cloudformation Template
      run: |
        aws cloudformation validate-template --template-body file://cloudformation/data-service.yml
      # deploy stack
    - name: Deploy Data Service Stack
      run: |
        aws cloudformation deploy \
          --template-file cloudformation/data-service.yml \
          --stack-name DataServiceStack \
          --parameter-overrides ImageURI=${{ needs.staging-build-and-push-image.outputs.image-uri }} \
          --capabilities CAPABILITY_IAM
      # verify stack deployment 
    - name: Verify Deployment
      run: |
        aws cloudformation describe-stacks --stack-name DataServiceStack
  
  # data service deploys
  staging-deploy-reversion-service:
    # only deploy upon main merge & input
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [staging-manual-approval, staging-build-and-push-image]
    environment: staging
    permissions:
      deployments: write
    steps:
      # gather AWS creds
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.QA_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.QA_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
      # checkout code
    - name: Checkout repository code
      uses: actions/checkout@v4
      # make sure CF file is valid
    - name: Validate Service Cloudformation Template
      run: |
        aws cloudformation validate-template --template-body file://cloudformation/data-service.yml
      # deploy stack
    - name: Deploy Data Service Stack
      run: |
        aws cloudformation deploy \
          --template-file cloudformation/data-service.yml \
          --stack-name DataServiceStack \
          --parameter-overrides ImageURI=${{ needs.staging-build-and-push-image.outputs.image-uri }} \
          --capabilities CAPABILITY_IAM
      # verify stack deployment 
    - name: Verify Deployment
      run: |
        aws cloudformation describe-stacks --stack-name DataServiceStack
