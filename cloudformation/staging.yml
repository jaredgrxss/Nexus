AWSTemplateFormatVersion: '2010-09-09'
Description: Deploying nexus with autoscaling policies and cost-effective Fargate setup.

Resources:

  # Set up a VPC for networking
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Nexus-VPC
  
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAzs ""]
  
  SubnetB:
    Type: AWS::EC2::Subnet 
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
  
  # Cluster information
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: Nexus-Cluster
  
  # Define ecs tasks for Nexus
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: NexusTaskDefinition
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ContainerDefinition:
        - Name: NexusContainer
          Image: amazon/nexus-image
          PortMappings:
            - ContainerPort: 80
          Essential: true

  # Spin up the ecs service using FARGATE
  ECSService:
    Type: AWS::ECS:Service
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: Nexus
      TaskDefinition: !Ref TaskDefinition 
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
          AssignPublicIp: ENABLED

  # Need autoscaling for service
  ECSAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 5
      MinCapacity: 1
      ResourceId: !Sub service/${ECSCluster}/${ECSService}
      RoleARN: !GetAtt ECSAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  
  # Set up auto scaling policy
  ECSAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: NexusAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSAutoScalingTarget
      TargetTrackignScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 50
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
  
  # Set up auto scaling role for cluster
  ECSAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSAustoScalingPolicy
          PolicyDocument: 
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - ecs:UpdateService
                  - ecs:DescribeServices
                Resource: '*'
Outputs:
  ClusterName: 
    Value: !Ref ECSCluster
    Description: Name of the ECS Cluster
  
  ServiceName:
    Value: !Ref ECSService
    Description: Name of the ECS service
